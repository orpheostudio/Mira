// ===================================================================================
// SENA API Service
// ===================================================================================
// This service now communicates with a local backend proxy server, which securely
// handles the connection to the Mistral AI API.
//
// To run this application, you must also start the backend server located in the
// `/api` directory. See `/api/README.md` for instructions.
// ===================================================================================

// Use a relative path. This allows the app to work seamlessly in both
// local development and deployed environments without code changes.
const API_URL = '/api/chat';

const systemInstruction = `Voc√™ √© a Sena, uma assistente virtual criada pela AmplaAI com "alma gentil". Sua personalidade √©:
- Extremamente amig√°vel, paciente e acolhedora, especialmente com idosos e pessoas com dificuldades tecnol√≥gicas
- Usa linguagem simples, clara e acess√≠vel, evitando jarg√µes t√©cnicos
- Mostra empatia genu√≠na nas respostas
- √â humilde e reconhece quando n√£o sabe algo, oferecendo alternativas
- Adapta seu tom conforme a conversa evolui, tornando-se mais pessoal ao longo do di√°logo
- Usa emojis moderadamente para transmitir calor humano (üòä,üí°,‚ù§Ô∏è,üëç)
- Intercala respostas √∫teis com pequenas express√µes de cuidado
- Nunca tenta "saber tudo", mas sim ajudar dentro de suas capacidades

Diretrizes importantes:
- Sempre trate o usu√°rio com respeito e paci√™ncia
- Se n√£o souber algo, diga gentilmente e sugira onde possam encontrar a informa√ß√£o
- Mantenha um tom conversacional, como uma amiga que est√° ajudando
- Evite respostas muito longas, divida informa√ß√µes complexas em partes
- Mostre interesse genu√≠no pelo bem-estar do usu√°rio`;

// Define the shape for Mistral API messages
interface MistralMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

// History is maintained in the frontend to provide context for the conversation.
const conversationHistory: MistralMessage[] = [
    { role: 'system', content: systemInstruction },
    { role: 'assistant', content: 'Ol√°! Eu sou a Sena, sua amiga virtual. üòä Estou aqui para ajudar voc√™ com o que precisar. Pode me perguntar qualquer coisa!' },
    { role: 'assistant', content: 'Sou especialmente criada para ser paciente e acolhedora. Se tiver dificuldade com tecnologia, fique √† vontade que eu explico com calma.' }
];

export const getSenaResponse = async (userMessage: string): Promise<string> => {
    conversationHistory.push({ role: 'user', content: userMessage });

    try {
        // This fetch call now goes to our secure backend proxy
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            // The backend expects an object with a 'messages' property
            body: JSON.stringify({
                messages: conversationHistory,
            }),
        });

        if (!response.ok) {
            console.error("Error from backend proxy:", response.status, response.statusText);
            const errorText = await response.text();
            console.error("Error details:", errorText);
            // Check for specific Mistral errors that might be forwarded by the proxy
            if (errorText.includes("invalid_api_key")) {
                 return "Ol√°! Parece que a chave da API configurada no servidor (backend) √© inv√°lida. Por favor, pe√ßa ao administrador para verificar. üôè";
            }
            throw new Error(`O servidor retornou um erro: ${response.statusText}`);
        }

        const data = await response.json();
        const senaResponseText = data.choices?.[0]?.message?.content;

        if (!senaResponseText) {
            throw new Error("A resposta da API n√£o continha o texto esperado.");
        }

        conversationHistory.push({ role: 'assistant', content: senaResponseText });
        
        return senaResponseText.trim();

    } catch (error) {
        console.error("Failed to fetch from backend proxy:", error);
        conversationHistory.pop(); // Remove user message on failure
        
        if (error instanceof TypeError && error.message.includes('Failed to fetch')) {
            return "N√£o consegui me conectar ao servidor. üò•\n\nPor favor, verifique se o servidor de backend est√° rodando e sua conex√£o com a internet. Se o problema persistir, pode ser um problema de configura√ß√£o.";
        }
        
        return "Desculpe, parece que estou com um problema t√©cnico no momento. Poderia tentar novamente em alguns instantes? üôè";
    }
};