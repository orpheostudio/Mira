/**
 * SENA Mistral API Client - Production Ready
 * Cliente robusto para comunicação com o backend Mistral Proxy
 */

// ===========================================
// CONFIGURAÇÃO
// ===========================================

const API_CONFIG = {
  baseURL: import.meta.env.VITE_API_URL || process.env.REACT_APP_API_URL || 'https://api.sena.orpheostudio.com.br',
  timeout: 30000, // 30 segundos
  retryAttempts: 3,
  retryDelay: 1000, // 1 segundo
};

// ===========================================
// UTILITÁRIOS
// ===========================================

class APIError extends Error {
  constructor(message, statusCode, details, requestId) {
    super(message);
    this.name = 'APIError';
    this.statusCode = statusCode;
    this.details = details;
    this.requestId = requestId;
  }
}

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// ===========================================
// CLIENTE DA API
// ===========================================

class MistralAPIClient {
  constructor(config = {}) {
    this.baseURL = config.baseURL || API_CONFIG.baseURL;
    this.timeout = config.timeout || API_CONFIG.timeout;
    this.retryAttempts = config.retryAttempts || API_CONFIG.retryAttempts;
    this.retryDelay = config.retryDelay || API_CONFIG.retryDelay;
    this.onError = config.onError || null;
    this.onRetry = config.onRetry || null;
  }

  /**
   * Faz uma requisição HTTP com timeout e retry
   */
  async _request(url, options, attempt = 1) {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), this.timeout);

    try {
      const response = await fetch(url, {
        ...options,
        signal: controller.signal,
      });

      clearTimeout(timeoutId);
      return response;

    } catch (error) {
      clearTimeout(timeoutId);

      // Retry em caso de erro de rede
      if (attempt < this.retryAttempts && (error.name === 'AbortError' || error.message.includes('fetch'))) {
        const delay = this.retryDelay * attempt;
        
        if (this.onRetry) {
          this.onRetry(attempt, delay, error);
        }
        
        console.warn(`⚠️  Tentativa ${attempt}/${this.retryAttempts} falhou. Tentando novamente em ${delay}ms...`);
        await sleep(delay);
        return this._request(url, options, attempt + 1);
      }

      throw error;
    }
  }

  /**
   * Processa resposta da API
   */
  async _handleResponse(response) {
    const contentType = response.headers.get('content-type');
    
    let data;
    if (contentType?.includes('application/json')) {
      data = await response.json();
    } else {
      data = { message: await response.text() };
    }

    if (!response.ok) {
      const error = new APIError(
        data.error || `Erro HTTP ${response.status}`,
        response.status,
        data.details,
        data.requestId
      );

      if (this.onError) {
        this.onError(error);
      }

      throw error;
    }

    return data;
  }

  /**
   * Verifica saúde do servidor
   */
  async checkHealth() {
    try {
      const response = await this._request(`${this.baseURL}/health`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      return await this._handleResponse(response);
    } catch (error) {
      console.error('❌ Erro ao verificar saúde do servidor:', error);
      return null;
    }
  }

  /**
   * Valida mensagens antes de enviar
   */
  _validateMessages(messages) {
    if (!Array.isArray(messages)) {
      throw new Error('messages deve ser um array');
    }

    if (messages.length === 0) {
      throw new Error('messages não pode estar vazio');
    }

    if (messages.length > 50) {
      throw new Error('Máximo de 50 mensagens permitido');
    }

    messages.forEach((msg, index) => {
      if (!msg.role || !msg.content) {
        throw new Error(`Mensagem ${index + 1} deve ter 'role' e 'content'`);
      }

      if (!['system', 'user', 'assistant'].includes(msg.role)) {
        throw new Error(`Role inválido na mensagem ${index + 1}: ${msg.role}`);
      }

      if (typeof msg.content !== 'string') {
        throw new Error(`Conteúdo da mensagem ${index + 1} deve ser string`);
      }
    });
  }

  /**
   * Envia mensagens para o chat
   * @param {Array} messages - Array de mensagens [{role: 'user'|'assistant'|'system', content: string}]
   * @param {Object} options - Opções (model, temperature, max_tokens)
   * @returns {Promise<Object>} Resposta da API
   */
  async sendMessage(messages, options = {}) {
    // Validação
    this._validateMessages(messages);

    const requestBody = {
      messages,
      model: options.model || 'mistral-large-latest',
      temperature: options.temperature ?? 0.7,
      max_tokens: options.max_tokens || 1000,
    };

    try {
      const response = await this._request(`${this.baseURL}/api/chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      return await this._handleResponse(response);
    } catch (error) {
      console.error('❌ Erro ao enviar mensagem:', error);
      throw error;
    }
  }

  /**
   * Envia mensagem com streaming (para implementação futura)
   */
  async sendMessageStream(messages, options = {}, onChunk) {
    throw new Error('Streaming não implementado ainda');
  }
}

// ===========================================
// GERENCIADOR DE CONVERSAÇÃO
// ===========================================

class ConversationManager {
  constructor(apiClient) {
    this.apiClient = apiClient;
    this.history = [];
    this.maxHistory = 50;
  }

  /**
   * Adiciona mensagem ao histórico
   */
  addMessage(role, content) {
    this.history.push({ role, content });
    
    // Mantém apenas as últimas N mensagens
    if (this.history.length > this.maxHistory) {
      this.history = this.history.slice(-this.maxHistory);
    }
  }

  /**
   * Envia mensagem e atualiza histórico
   */
  async sendMessage(content, options = {}) {
    this.addMessage('user', content);

    try {
      const response = await this.apiClient.sendMessage(this.history, options);
      const assistantMessage = response.choices[0].message.content;
      
      this.addMessage('assistant', assistantMessage);

      return {
        success: true,
        message: assistantMessage,
        usage: response.usage,
        requestId: response.requestId,
      };
    } catch (error) {
      // Remove mensagem do usuário se falhar
      this.history.pop();

      return {
        success: false,
        error: error.message,
        errorDetails: error.details,
        requestId: error.requestId,
      };
    }
  }

  /**
   * Limpa histórico
   */
  clearHistory() {
    this.history = [];
  }

  /**
   * Obtém histórico
   */
  getHistory() {
    return [...this.history];
  }

  /**
   * Define system prompt
   */
  setSystemPrompt(content) {
    // Remove system prompt anterior se existir
    this.history = this.history.filter(msg => msg.role !== 'system');
    // Adiciona novo system prompt no início
    this.history.unshift({ role: 'system', content });
  }
}

// ===========================================
// INSTÂNCIA SINGLETON (OPCIONAL)
// ===========================================

let defaultClient = null;
let defaultConversation = null;

export function getAPIClient(config = {}) {
  if (!defaultClient) {
    defaultClient = new MistralAPIClient(config);
  }
  return defaultClient;
}

export function getConversationManager(config = {}) {
  if (!defaultConversation) {
    const client = getAPIClient(config);
    defaultConversation = new ConversationManager(client);
  }
  return defaultConversation;
}

// ===========================================
// HOOKS REACT (OPCIONAL)
// ===========================================

// Para React:
export function useMistralChat(config = {}) {
  const [conversation] = React.useState(() => {
    const client = new MistralAPIClient(config);
    return new ConversationManager(client);
  });

  const [isLoading, setIsLoading] = React.useState(false);
  const [error, setError] = React.useState(null);

  const sendMessage = React.useCallback(async (message, options) => {
    setIsLoading(true);
    setError(null);

    try {
      const result = await conversation.sendMessage(message, options);
      
      if (!result.success) {
        setError(result.error);
      }

      return result;
    } catch (err) {
      setError(err.message);
      return { success: false, error: err.message };
    } finally {
      setIsLoading(false);
    }
  }, [conversation]);

  const clearHistory = React.useCallback(() => {
    conversation.clearHistory();
  }, [conversation]);

  return {
    sendMessage,
    clearHistory,
    history: conversation.getHistory(),
    isLoading,
    error,
  };
}

// ===========================================
// EXPORTS
// ===========================================

export {
  MistralAPIClient,
  ConversationManager,
  APIError,
  API_CONFIG,
};

export default MistralAPIClient;